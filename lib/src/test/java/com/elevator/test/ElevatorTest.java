/*
 * This source file was generated by the Gradle 'init' task
 */
package com.elevator.test;

import com.elevator.manage.*;
import org.junit.jupiter.api.Test;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class ElevatorTest {

    @Test
    void testElevatorDuPath1() throws InterruptedException {
        // Covers path: [1, 2, 3, 4, 5, 6, 7, 17, 5, 6]
        Elevator elevator = new Elevator();
        elevator.moveElevator(); // Start the elevator's movement thread

        elevator.addRequest(new Request(2, true)); // Request to go to floor 2
        waitForElevatorToReachFloor(elevator, 2);

        assertEquals(2, elevator.getCurrentFloor());
    }

    @Test
    void testElevatorDuPath2() throws InterruptedException {
        // Covers path: [1, 2, 3, 4, 5, 6, 7, 14, 15, 16, 5, 6]
        Elevator elevator = new Elevator();
        elevator.moveElevator(); // Start the elevator's movement thread

        elevator.addRequest(new Request(4, true)); // Request to go to floor 4
        waitForElevatorToReachFloor(elevator, 4);

        assertEquals(4, elevator.getCurrentFloor());
    }

    @Test
    void testElevatorDuPath3() throws InterruptedException {
        // Covers path: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 5, 6]
        Elevator elevator = new Elevator();
        elevator.moveElevator(); // Start the elevator's movement thread

        elevator.addRequest(new Request(3, true)); // Request to go to floor 3
        elevator.addRequest(new Request(4, true)); // Request to go to floor 4
        waitForElevatorToReachFloor(elevator, 4);

        assertEquals(4, elevator.getCurrentFloor());
    }

    @Test
    void testScannerDuPath() throws InterruptedException {
        // Covers path: [1, 2, 3, 4, 5, 6, 7, 19, 20]
        Elevator elevator = new Elevator();
        elevator.moveElevator(); // Start the elevator's movement thread

        elevator.addRequest(new Request(1, true)); // Request to go to floor 1
        waitForElevatorToReachFloor(elevator, 1);

        assertEquals(1, elevator.getCurrentFloor());
    }

    @Test
    void testSourceFloorDuPath1() throws InterruptedException {
        // Covers path: [1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 6]
        Elevator elevator = new Elevator();
        elevator.moveElevator(); // Start the elevator's movement thread

        elevator.addRequest(new Request(2, true)); // Request to go to floor 2
        waitForElevatorToReachFloor(elevator, 2);

        assertEquals(2, elevator.getCurrentFloor());
    }

    @Test
    void testDirectionDuPath3() throws InterruptedException {
        // Covers path: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 5, 6]
        Elevator elevator = new Elevator();
        elevator.moveElevator(); // Start the elevator's movement thread

        elevator.addRequest(new Request(3, true)); // Request to go to floor 3
        elevator.addRequest(new Request(5, true)); // Request to go to floor 5
        waitForElevatorToReachFloor(elevator, 5);

        assertEquals(5, elevator.getCurrentFloor());
    }

    @Test
    void testDestinationFloorDuPath2() throws InterruptedException {
        // Covers path: [1, 2, 3, 4, 5, 6, 7, 14, 15, 16, 5, 6]
        Elevator elevator = new Elevator();
        elevator.moveElevator(); // Start the elevator's movement thread

        elevator.addRequest(new Request(2, true)); // Request to go to floor 2
        elevator.addRequest(new Request(4, true)); // Request to go to floor 4
        waitForElevatorToReachFloor(elevator, 4);

        assertEquals(4, elevator.getCurrentFloor());
    }

    /**
     * Helper method to wait for the elevator to reach a specific floor.
     */
    private void waitForElevatorToReachFloor(Elevator elevator, int targetFloor) throws InterruptedException {
        int maxWaitTime = 30; // Max wait time in seconds
        while (maxWaitTime > 0 && elevator.getCurrentFloor() != targetFloor) {
            TimeUnit.MILLISECONDS.sleep(500); // Check the elevator's floor every 500ms
            maxWaitTime--;
        }

        if (elevator.getCurrentFloor() != targetFloor) {
            throw new AssertionError("Elevator did not reach the target floor within the expected time.");
        }
    }
}